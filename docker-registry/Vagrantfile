# -*- mode: ruby -*-
# vi: set ft=ruby :

require 'fileutils'

Vagrant.require_version ">= 1.6.0"

# Make sure the vagrant-ignition plugin is installed
required_plugins = %w(vagrant-ignition)

plugins_to_install = required_plugins.select { |plugin| not Vagrant.has_plugin? plugin }
if not plugins_to_install.empty?
  puts "Installing plugins: #{plugins_to_install.join(' ')}"
  if system "vagrant plugin install #{plugins_to_install.join(' ')}"
    exec "vagrant #{ARGV.join(' ')}"
  else
    abort "Installation of one or more plugins has failed. Aborting."
  end
end

IGNITION_CONFIG_PATH = File.join(File.dirname(__FILE__), "config.ign")

# Defaults for config options defined in CONFIG
$hostname = "registry"
$share_home = false
$vm_gui = false
$vm_memory = 1024
$vm_cpus = 1
$shared_folders = {}
$forwarded_ports = { "5000" => "5000" }

Vagrant.configure("2") do |config|
  # always use Vagrants insecure key
  config.ssh.insert_key = false
  # forward ssh agent to easily ssh into the different machines
  config.ssh.forward_agent = true

  config.vm.box = "coreos-stable"
  config.vm.box_url = "https://stable.release.core-os.net/amd64-usr/current/coreos_production_vagrant_virtualbox.json"
  config.vm.box_check_update = false

  if Vagrant.has_plugin?("vagrant-proxyconf")
    #config.proxy.http     = "http://10.0.2.2:8080"
    #config.proxy.https    = "http://10.0.2.2:8080"
    #config.proxy.no_proxy = "10.0.2.2,10.0.2.15,127.0.0.1,localhost,.example.com"
    #config.proxy.enabled = { docker: false }
  end

  config.vm.provider :virtualbox do |v|
    # On VirtualBox, we don't have guest additions or a functional vboxsf
    # in CoreOS, so tell Vagrant that so it can be smarter.
    v.check_guest_additions = false
    v.functional_vboxsf     = false
    # enable ignition (this is always done on virtualbox as this is how the ssh key is added to the system)
    config.ignition.enabled = true
  end

  # plugin conflict
  if Vagrant.has_plugin?("vagrant-vbguest") then
    config.vbguest.auto_update = false
  end

  $forwarded_ports.each do |guest, host|
    config.vm.network "forwarded_port", guest: guest, host: host, auto_correct: true
  end

  config.vm.provider :virtualbox do |vb|
    vb.gui = $vm_gui
    vb.memory = $vm_memory
    vb.cpus = $vm_cpus
  end

  # Uncomment below to enable NFS for sharing the host machine into the coreos-vagrant VM.
  #config.vm.synced_folder ".", "/home/core/share", id: "core", :nfs => true, :mount_options => ['nolock,vers=3,udp']
  $shared_folders.each_with_index do |(host_folder, guest_folder), index|
    config.vm.synced_folder host_folder.to_s, guest_folder.to_s, id: "core-share%02d" % index, nfs: true, mount_options: ['nolock,vers=3,udp']
  end

  if $share_home
    config.vm.synced_folder ENV['HOME'], ENV['HOME'], id: "home", :nfs => true, :mount_options => ['nolock,vers=3,udp']
  end

  config.vm.provider :virtualbox do |vb|
    config.ignition.hostname = $hostname
    # when the ignition config doesn't exist, the plugin automatically generates a very basic Ignition with the ssh key
    # and previously specified options (ip and hostname). Otherwise, it appends those to the provided config.ign below
    if File.exist?(IGNITION_CONFIG_PATH)
      config.ignition.path = 'config.ign'
    end
  end

  #config.vm.provision :shell, :inline => "mkdir -p /etc/docker", :privileged => true

  config.vm.provision :file, :source => "registry-mirror.yml", :destination => "/tmp/registry-mirror.yml"

  config.vm.provision "shell", inline: <<-SHELL
set -xe
export PS4='+[$LINENO]'

mkdir -p /etc/docker/registry/
mv /tmp/registry-mirror.yml /etc/docker/registry/

docker run -d --restart=always --name registry-mirror -e https_proxy=${https_proxy} \
  -v /etc/docker/registry/registry-mirror.yml:/etc/docker/registry/config.yml \
  -v /var/lib/registry:/var/lib/registry -p 5000:5000 registry:2

  SHELL

end
